/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package research.topics.networks.gui;

import org.apache.hadoopts.chart.simple.MultiChart;
import org.apache.hadoopts.chart.statistic.HistogramChart;
import org.apache.hadoopts.data.series.TimeSeriesObject;
import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.UndirectedGraph;
import edu.uci.ics.jung.graph.event.GraphEvent.Vertex;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.PluggableGraphMouse;
import edu.uci.ics.jung.visualization.control.ScalingGraphMousePlugin;
import edu.uci.ics.jung.visualization.control.TranslatingGraphMousePlugin;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import graph.TemporalNetworkOfWikipediaNodes;
import graph.jung2.InteractiveGraphView;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.ui.RefineryUtilities;
import org.apache.hadoopts.chart.panels.ChartPanel3;
import research.networks.Edge;
import research.networks.NetworkFilter;
import research.networks.data.WikiEdge;
import research.networks.data.WikiVertice;
import org.apache.hadoopts.statistics.HaeufigkeitsZaehlerDouble;
import experiments.linkstrength.CheckInfluenceOfSingelPeaks;
import com.cloudera.wikiexplorer.ng.util.NodeGroup;


/**
 *
 * @author kamir
 */
public class NetworkViewPanel extends javax.swing.JPanel {

    AnalysisProject pro = null;
    /**
     * Creates new form NetworkViewPanel
     */
    public NetworkViewPanel() {
        initComponents();
    }

    NetworkFilter filter = null;
    TimeSeriesObject mr = null;
    TimeSeriesObject original = null;
    
    UndirectedGraph<WikiVertice,WikiEdge> graph = null;
    
    public NetworkViewPanel(AnalysisProject project , TimeSeriesObject loadAccessNet1) {
        this();
        pro = project;
        mr = loadAccessNet1;
        original = loadAccessNet1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton5 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfHistMin = new javax.swing.JTextField();
        jtfHistMax = new javax.swing.JTextField();
        jtfHistBins = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setFocusCycleRoot(true);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jToggleButton2.setText("matrix on/off");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("net on/off");
        jToggleButton1.setEnabled(false);
        jToggleButton1.setMultiClickThreshhold(1L);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("reload");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton2))
                .addContainerGap(290, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addGap(16, 16, 16))
        );

        jTabbedPane2.addTab("Control", jPanel5);

        jSpinner1.setToolTipText("set the value of the threshold x 100 to filter the nodes ....");
        jSpinner1.setValue(50);

        jButton5.setText("set ts-Filter");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addContainerGap(222, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Filter", jPanel6);

        jLabel1.setText("min : ");

        jLabel2.setText("max : ");

        jLabel3.setText("nr of bins : ");

        jtfHistMin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfHistMin.setText("0");

        jtfHistMax.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfHistMax.setText("0.5");

        jtfHistBins.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfHistBins.setText("50");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jtfHistBins, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel2))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfHistMax)
                            .addComponent(jtfHistMin))))
                .addContainerGap(276, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfHistMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfHistMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfHistBins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Histogram", jPanel7);

        jPanel3.add(jTabbedPane2, java.awt.BorderLayout.PAGE_START);

        jPanel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setOpaque(false);

        jPanel9.setPreferredSize(new java.awt.Dimension(2000, 2000));
        jPanel9.setLayout(new java.awt.BorderLayout());
        jScrollPane3.setViewportView(jPanel9);

        jPanel8.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel8, java.awt.BorderLayout.CENTER);

        jScrollPane2.setViewportView(jPanel3);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Matrix", jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Jung2 Network", jPanel2);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());
        add(jPanel4, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        boolean b = this.jToggleButton1.isSelected();
        if ( b ) { 
            initJungNetwork();
        }
        else { 
            this.removeNetworkView();
        }
        this.jToggleButton1.setSelected( !b );
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
                 
        boolean b = this.jToggleButton2.isSelected();
        if ( b ) { 
            initAdjacencyMatrix();
        }
        else { 
            this.removeAdjecancyMatrix();
        }
        this.jToggleButton2.setSelected( !b );
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        double ts = ((double) (Integer) this.jSpinner1.getValue()) / 100.0;
        filter = new NetworkFilter(ts);
        applyFilter();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        reloadView();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JTextField jtfHistBins;
    private javax.swing.JTextField jtfHistMax;
    private javax.swing.JTextField jtfHistMin;
    // End of variables declaration//GEN-END:variables

    private void initJungNetwork() {
        JPanel p = new JPanel();
        p.setSize( 4000,4000 );
        p.setBackground( Color.GREEN );
        
        Graph g = TemporalNetworkOfWikipediaNodes.createNetworkFromHashedTimeSeriesObject(mr);
        
        JPanel pp = simpleGraphPanel( g );
        
        this.jScrollPane1.getViewport().add( pp );
        
    }
    
    public void removeNetworkView() { 
        this.jScrollPane1.getViewport().removeAll();
    };

    
    private void initAdjacencyMatrix() {
        
        double[][] data = loadMatrixFromreihe( mr );
        int l = data[0].length;
        int zoom = 2;
        
        ChartPanel3 pan1 = new ChartPanel3( data , zoom );
       
        this.jPanel9.setSize( pan1.getWidth(), pan1.getHeight() ); 
        this.jPanel9.add( pan1 , BorderLayout.CENTER );
        
        this.repaint();         
    }
    
    public JPanel simpleGraphPanel(Graph<Vertex,Edge> graph ) {

        InteractiveGraphView sgv = new InteractiveGraphView( graph ); // Creates the graph...
        // Layout<V, E>, VisualizationViewer<V,E>
        Layout<Integer, String> layout = new CircleLayout(sgv.g);
        //Layout<Integer, String> layout = new ISOMLayout(sgv.g);


        layout.setSize(new Dimension(300,300));
        VisualizationViewer<Integer,String> vv = new VisualizationViewer<Integer,String>(layout);
        vv.setPreferredSize(new Dimension(350,350));
        // Show vertex and edge labels
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        vv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());

        // Create our "custom" mouse here. We start with a PluggableGraphMouse
        // Then add the plugins you desire.
        PluggableGraphMouse gm = new PluggableGraphMouse();
        gm.add(new TranslatingGraphMousePlugin(MouseEvent.BUTTON1_MASK));
        gm.add(new ScalingGraphMousePlugin(new CrossoverScalingControl(), 0, 1.1f, 0.9f));

        vv.setGraphMouse(gm);
        
        return vv;
    }

    private void removeAdjecancyMatrix() {
        this.jPanel9.removeAll();
    }

    double scale = 255;
    private double[][] loadMatrixFromreihe(TimeSeriesObject mr) {
        
        Vector<String> allKeys = new Vector<String>();
        
        // alle Keys in mrA ermitteln ...
        Hashtable t1 = mr.hashedValues; 
        
        System.out.println(" mrA: " + t1.size() + " links." );
        
        for( Object o : t1.keySet() ) { 
            String s = (String)o;
            
            String[] ids = s.split("_");
            String id1 = ids[0];
            String id2 = ids[1];

            if ( !allKeys.contains( id1 ) ) allKeys.add( id1 );
            if ( !allKeys.contains( id2 ) ) allKeys.add( id2 );
        
        }
        
        int nIds = allKeys.size();
        double v = 0.0;
        double[][] data = new double[nIds][nIds];
        for( int i = 0; i < nIds; i++ ) { 
            String k1 = allKeys.elementAt(i);
            for( int j = 0; j < nIds; j++ ) {
                String key = k1 + "_" + allKeys.elementAt(j);
                Object o = mr.hashedValues.get(key);
                if ( o == null ) { 
                    v = 0.0;
                }
                else { 
                    v = (Double)o * scale;
                }
                data[i][j] = v;
            }
        }
        return data;
    }

    public void doFilter(NetworkFilter filter, TimeSeriesObject raw) {
        
        this.removeAdjecancyMatrix();
        
        TimeSeriesObject mrs[] = filter.applyFilter(raw); 
        mr = mrs[1];
        System.out.println(">>>" + mrs[2].hashedValues.size() + " filtered (ts=" + filter.ts +").");
        System.out.println("   " + mrs[2].getMaxY() );

        mrs[0].setFileName( "unfiltered" );
        mrs[1].setFileName( "filtered" );
        mrs[2].setFileName( "unused" );
        mrs[0].setLabel( "unfiltered" );
        mrs[1].setLabel( "filtered" );
        mrs[2].setLabel( "unused" );
        
        // in 0 und 2 sind dann die anderen Matrize drin....

        this.initAdjacencyMatrix();
        this.initHistogramPanel( mrs );
    }

    private void applyFilter() {
       doFilter( filter, mr );       
    }

    private void initHistogramPanel(TimeSeriesObject[] mrs) {
         LinkStrengthHistogram histogram = new LinkStrengthHistogram();
         double min = textToDouble( jtfHistMin );  
         double max = textToDouble( jtfHistMax ); 
         double bins = textToDouble( jtfHistBins );
                 
         histogram.createHistogramm2( pro, mr, (int)bins, min, max);
    }
    
    public double textToDouble( JTextField jtf ) { 
        return Double.parseDouble( jtf.getText() );
    }

    private void reloadView() {
        mr = original;
    }

}
class LinkStrengthHistogram { 

     static TimeSeriesObject[] mrn2 = null;
 
    /**
     * Histogramm für Strength ...
     *
     * @param mr
     * @param bins
     * @param min
     * @param max
     * @return
     */
    public static String createHistogramm2( AnalysisProject pro, TimeSeriesObject mr, int bins, double min, double max ) {
        
        if ( mrn2 == null ) mrn2 = new TimeSeriesObject[ 1 ];

        String pfad = pro.baseFolder;
     
        String file = "/hist/" + mr.getLabel().replaceAll(" ", "_" );

        if ( false ) {

            HaeufigkeitsZaehlerDouble z = new HaeufigkeitsZaehlerDouble();
            for ( Double v : (Vector<Double>)mr.yValues ) {
                z.addData( v );
            }
            z.min = min;
            z.max = max;
            z.intervalle = bins;
            z.calcWS();
            TimeSeriesObject mrr = z.getHistogram();
            
            mrr.setLabel( NodeGroup.splitIndex + "  " );
            mrn2[ 0 ] = mrr;

            String yLabel = "strength";
            if ( CheckInfluenceOfSingelPeaks.mode == CheckInfluenceOfSingelPeaks.mode_CC_TAU_0 )
                yLabel = "CC(tau=0)";
            if ( CheckInfluenceOfSingelPeaks.mode == CheckInfluenceOfSingelPeaks.mode_ADVANCED )
                yLabel = "strength_2";
            

            //if ( NodeGroup.splitIndex == NodeGroup.maxSplitIndex-1 ) {
                MultiChart.open(mrn2, file , "" , yLabel , true);
                MultiChart.store(mrn2, file, "#", yLabel , true, pfad, file, "");
                System.out.println( "### Create Histogram : " + file );
            
                //}
        }
        else {

            HistogramChart demo = new HistogramChart( mr.getLabel()  );
            demo.addSerieWithBinning( mr, bins, min, max );
            demo.setContentPane( demo.createChartPanel() );
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
            demo.store( pfad, file );
        }


        return file + ".png";
    };

}