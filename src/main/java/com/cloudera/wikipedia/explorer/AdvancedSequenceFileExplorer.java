/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cloudera.wikipedia.explorer;


import org.apache.hadoopts.chart.simple.MultiBarChart;
import org.apache.hadoopts.chart.simple.MultiChart;
import org.apache.hadoopts.chart.simple.MultiChartDistComp;
import com.ibm.icu.util.Calendar;
import com.ibm.icu.util.GregorianCalendar;
import org.apache.hadoopts.data.series.Messreihe;
import org.apache.hadoopts.hadoopts.core.TSBucket;
import org.apache.hadoopts.hadoopts.topics.wikipedia.LocalWikipediaNetwork2;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import m3.wikipedia.corpus.extractor.NetDensityCalc;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Text;
import org.apache.mahout.math.NamedVector;
import org.apache.mahout.math.VectorWritable;
import research.ETH.ExtendedNodePairSFE;
import org.apache.hadoopts.statistics.HaeufigkeitsZaehlerDouble; 


  
import m3.wikipedia.corpus.extractor.category.ExtractCategorieCorpus;
import m3.wikipedia.corpus.extractor.edits.WikiHistoryExtraction2;
import m3.wikipedia.explorer.data.WikiNode;
import org.etosha.core.sc.connector.external.Wiki;
import statistics.HaeufigkeitsZaehlerDoubleSIMPLE;

public class AdvancedSequenceFileExplorer extends javax.swing.JFrame {

    /**
     * Creates new form SequenceFileExplorer
     */
    public AdvancedSequenceFileExplorer() {
        initComponents();
        com.cloudera.wikiexplorer.ng.gui.GUITool.fullScreen(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jtf_OUTPUT = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtLF = new javax.swing.JTextField();
        jlZ = new javax.swing.JLabel();
        jtf_Studie = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtJAHR = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtMONAT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtTAG = new javax.swing.JTextField();
        jlL = new javax.swing.JLabel();
        jtL = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        STATFILELABEL = new javax.swing.JTextField();
        jRadioButton4 = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jcbRAW = new javax.swing.JCheckBox();
        jcbMW = new javax.swing.JCheckBox();
        jcbRATIO = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jcbWT = new javax.swing.JCheckBox();
        jcbDT = new javax.swing.JCheckBox();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtfEXT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jlPATTERN = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("wikipedia/explorer/Bundle"); // NOI18N
        setTitle(bundle.getString("AdvancedSequenceFileExplorer.title")); // NOI18N

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(jList1);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(bundle.getString("AdvancedSequenceFileExplorer.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1305, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(bundle.getString("AdvancedSequenceFileExplorer.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "w1", "w2", "w3", "w4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("AdvancedSequenceFileExplorer.jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("AdvancedSequenceFileExplorer.jTable1.columnModel.title1")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("AdvancedSequenceFileExplorer.jTable1.columnModel.title2")); // NOI18N
        jTable1.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("AdvancedSequenceFileExplorer.jTable1.columnModel.title3")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1281, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("AdvancedSequenceFileExplorer.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(787, 230));

        jtf_OUTPUT.setText(bundle.getString("AdvancedSequenceFileExplorer.jtf_OUTPUT.text")); // NOI18N

        jButton3.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel1.text")); // NOI18N

        jtLF.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jtLF.setText(bundle.getString("AdvancedSequenceFileExplorer.jtLF.text")); // NOI18N

        jlZ.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jlZ.setText(bundle.getString("AdvancedSequenceFileExplorer.jlZ.text")); // NOI18N

        jtf_Studie.setText(bundle.getString("AdvancedSequenceFileExplorer.jtf_Studie.text")); // NOI18N
        jtf_Studie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_StudieActionPerformed(evt);
            }
        });
        jtf_Studie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_StudieFocusLost(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AdvancedSequenceFileExplorer.jPanel6.border.title"))); // NOI18N

        jLabel2.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel2.text")); // NOI18N

        jtJAHR.setText(bundle.getString("AdvancedSequenceFileExplorer.jtJAHR.text")); // NOI18N

        jLabel3.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel3.text")); // NOI18N

        jtMONAT.setText(bundle.getString("AdvancedSequenceFileExplorer.jtMONAT.text")); // NOI18N

        jLabel4.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel4.text")); // NOI18N

        jtTAG.setText(bundle.getString("AdvancedSequenceFileExplorer.jtTAG.text")); // NOI18N

        jlL.setText(bundle.getString("AdvancedSequenceFileExplorer.jlL.text")); // NOI18N

        jtL.setText(bundle.getString("AdvancedSequenceFileExplorer.jtL.text")); // NOI18N

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText(bundle.getString("AdvancedSequenceFileExplorer.jRadioButton1.text")); // NOI18N

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText(bundle.getString("AdvancedSequenceFileExplorer.jRadioButton2.text")); // NOI18N

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText(bundle.getString("AdvancedSequenceFileExplorer.jRadioButton3.text")); // NOI18N

        STATFILELABEL.setText(bundle.getString("AdvancedSequenceFileExplorer.STATFILELABEL.text")); // NOI18N
        STATFILELABEL.setBorder(null);

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText(bundle.getString("AdvancedSequenceFileExplorer.jRadioButton4.text")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(jtJAHR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(jtMONAT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(jtTAG, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)))
                .addGap(27, 27, 27)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jlL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 69, Short.MAX_VALUE))
                    .addComponent(STATFILELABEL))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtJAHR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtMONAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtTAG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlL)
                    .addComponent(jtL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(STATFILELABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton4))
                .addGap(40, 40, 40))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AdvancedSequenceFileExplorer.jPanel7.border.title"))); // NOI18N

        jcbRAW.setSelected(true);
        jcbRAW.setText(bundle.getString("AdvancedSequenceFileExplorer.jcbRAW.text")); // NOI18N

        jcbMW.setSelected(true);
        jcbMW.setText(bundle.getString("AdvancedSequenceFileExplorer.jcbMW.text")); // NOI18N

        jcbRATIO.setSelected(true);
        jcbRATIO.setText(bundle.getString("AdvancedSequenceFileExplorer.jcbRATIO.text")); // NOI18N

        jCheckBox1.setSelected(true);
        jCheckBox1.setText(bundle.getString("AdvancedSequenceFileExplorer.jCheckBox1.text")); // NOI18N

        jcbWT.setText(bundle.getString("AdvancedSequenceFileExplorer.jcbWT.text")); // NOI18N

        jcbDT.setText(bundle.getString("AdvancedSequenceFileExplorer.jcbDT.text")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbMW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbRATIO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbWT)
                            .addComponent(jcbDT)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jcbRAW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbRAW)
                    .addComponent(jCheckBox1))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbMW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbRATIO)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jcbWT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbDT)))
                .addContainerGap())
        );

        jButton5.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel5.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel5.text")); // NOI18N

        jButton1.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel6.text")); // NOI18N

        jLabel7.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel7.text")); // NOI18N

        jtfEXT.setText(bundle.getString("AdvancedSequenceFileExplorer.jtfEXT.text")); // NOI18N

        jLabel8.setText(bundle.getString("AdvancedSequenceFileExplorer.jLabel8.text")); // NOI18N

        jlPATTERN.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jlPATTERN.setText(bundle.getString("AdvancedSequenceFileExplorer.jlPATTERN.text")); // NOI18N

        jButton2.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton7.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton7.text")); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton9.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton9.text")); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText(bundle.getString("AdvancedSequenceFileExplorer.jButton10.text")); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(jButton7))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jtf_Studie, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtfEXT))
                            .addComponent(jtLF)
                            .addComponent(jtf_OUTPUT, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addComponent(jButton10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlPATTERN, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                                    .addComponent(jlZ, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(jButton2)))
                        .addGap(24, 24, 24))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Studie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jlZ)
                    .addComponent(jtfEXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtLF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8)
                            .addComponent(jlPATTERN)
                            .addComponent(jButton9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtf_OUTPUT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jButton4)
                            .addComponent(jButton10))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton3)
                            .addComponent(jButton7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AdvancedSequenceFileExplorer.jPanel5.border.title"))); // NOI18N
        jPanel5.setMinimumSize(new java.awt.Dimension(100, 48));
        jPanel5.setPreferredSize(new java.awt.Dimension(571, 48));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1305, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, java.awt.BorderLayout.PAGE_END);

        fileMenu.setMnemonic('f');
        fileMenu.setText(bundle.getString("AdvancedSequenceFileExplorer.fileMenu.text")); // NOI18N

        openMenuItem.setMnemonic('o');
        openMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.openMenuItem.text")); // NOI18N
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.saveMenuItem.text")); // NOI18N
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.saveAsMenuItem.text")); // NOI18N
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.exitMenuItem.text")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText(bundle.getString("AdvancedSequenceFileExplorer.editMenu.text")); // NOI18N

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.cutMenuItem.text")); // NOI18N
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.copyMenuItem.text")); // NOI18N
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.pasteMenuItem.text")); // NOI18N
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.deleteMenuItem.text")); // NOI18N
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText(bundle.getString("AdvancedSequenceFileExplorer.helpMenu.text")); // NOI18N

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.contentsMenuItem.text")); // NOI18N
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText(bundle.getString("AdvancedSequenceFileExplorer.aboutMenuItem.text")); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        gtsb.analyseRows();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // load the listfile (merged listfile)
        try {
            
            JFileChooser jfc = new JFileChooser();
            jfc.setSize(800, 600);
            jfc.setCurrentDirectory(new File("/home/kamir/ANALYSIS/Wikipedia/Characterisierung_Der_Methode"));
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            jfc.showOpenDialog(this);
            File f = jfc.getSelectedFile();

            InputStreamReader r;

            r = new InputStreamReader( new FileInputStream( f ) );

            BufferedReader br = new BufferedReader(r);

            loadListFile( br );
            
            System.out.println( "\n" );
            // process the datafile ...
            try {

                boolean multi = true;

                // Prozedur für einzelnes File aus dem Cluster ...
                getFileName();
                initFileSystem();
                
                _getMetaData(multi);
            
                int limit = Integer.MAX_VALUE;
//                limit = 10000;
                
                listContent( limit , "");

                _initGlobalTSBuffer();
            
                initListe();
            
//
//            openFrame4Index(1, multi);
//
//            gtsb.analyseRows();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
            

        } 
        catch (Exception ex) {
            Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }
//        String ff = "/user/kamir/wikipedia/corpus/" + f.getName().substring(0, f.getName().length() - 4);
//        jTextField1.setText(ff + "_merged");
        
        System.out.println(">>> data was loaded ...");
        
        for( int xx = 0; xx < zz; xx++ ) { 
            
            int x = xx+1;
            Vector<Messreihe> grCN = this.hash.get(x + ".CN");
            Vector<Messreihe> grIWL = this.hash.get(x + ".IWL");
            Vector<Messreihe> grAL = this.hash.get(x + ".A.L");
            Vector<Messreihe> grBL = this.hash.get(x + ".B.L");

            System.out.println( "> We have data for: " );

            int a = 0;
            int b = 0;
            int c = 0;
            int d = 0;
            
            String name = "?."+x;
            
            if( grCN != null ) {
                a = grCN.size();
                if ( a > 0 ) name = grCN.elementAt(0).getLabel() + grCN.elementAt(0).getIdentifier();
            }    
            System.out.println( ">>> Check CN_" + x + " now. name={" + name + "}" );
            
            if( grIWL != null )
                b = grIWL.size();

            if( grAL != null )
                c = grAL.size();
   
            if( grBL != null )
                d = grBL.size();

            
            System.out.println( ">   CN         : " + a );
            System.out.println( ">   IWL        : " + b );
            System.out.println( ">   AL         : " + c );
            System.out.println( ">   BL         : " + d );
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    
    HashSet<String> names = new HashSet<String>();
    HashSet<String> langs = new HashSet<String>();
    HashSet<String> codes = new HashSet<String>();
     
    HashMap<String,String> inverted_coded_pages = new HashMap<String,String>();
     
    public void loadListFile( BufferedReader br ) throws FileNotFoundException, IOException { 
        
        while( br.ready() ) { 
            
            String line = br.readLine();
//            System.out.println( "*" + line );            
            
            String[] l = line.split("\t");

            String code = l[0];
            
            if( !codes.contains( l[0]) ) { 
                codes.add(l[0]);
            }

            if( !langs.contains( l[1]) ) { 
                langs.add(l[1]);
            }

            if( !names.contains( l[1] + "\t" + l[2]) ) { 
                names.add(l[1] + "\t" + l[2]);
            }
            
            inverted_coded_pages.put( l[1] + "___" + l[2], code );
            
//            // VERARBEITE HIER noch die "lang" und "page"
//            System.out.println( "***" + line );
//            System.out.println( "***" + util.WikiToolHelper.codeBack( l[2] ) );
        }
    

        
        System.out.println( "# of elements in INV.codes : " + inverted_coded_pages.size() ); 
        System.out.println( "# of page-names            : " + names.size() );
        System.out.println( "# of languages             : " + langs.size() );        
        System.out.println( "# of groups                : " + codes.size() + " (" + ( codes.size() / 4.0 ) + ")");       
    

    }
    
    
    
    private void jtf_StudieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_StudieFocusLost
//        // TODO add your handling code here:
//        String ext = jtfEXT.getText();
//        this.jtf_OUTPUT.setText("/user/kamir/wikipedia/corpus/" + this.jtf_Studie.getText() + "_" +ext +"_merged/part-r-00000");
//        this.jtLF.setText("/home/kamir/bin/WikiExplorer/WikiExplorer/merged_listfile_" + this.jtf_Studie.getText() + ".lst");
    }//GEN-LAST:event_jtf_StudieFocusLost

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {

            boolean multi = true;

            // Prozedur für einzelnes File aus dem Cluster ...
            getFileName();
            initFileSystem();
            _getMetaData(multi);
            
            listContent(Integer.MAX_VALUE, "");

            _initGlobalTSBuffer();
            
            initListe();
            
//
//            openFrame4Index(1, multi);
//
//            gtsb.analyseRows();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int i = getSelectionCN();
        this.openFrame4Index(i, true);
    }//GEN-LAST:event_jButton5ActionPerformed

    int column = 1;
            
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            FileWriter fw = null;
            String lfile = jtf_Studie.getText();
            File fstat = new File(lfile + "_" + STATFILELABEL.getText() + ".access_counts_per_group.dat");
            
            fw = new FileWriter(fstat);
            BufferedWriter bw = new BufferedWriter(fw);

            HashSet hs = localNet.codes;
            ArrayList al = new ArrayList();
            for (Object o : hs) {
                al.add(o);
            }
            Collections.sort(al);
            final String hl = "key" + "\t" + "#MR" + "\t" + "SUM(access)" + "\t" + "MW( access )";
            System.out.println(hl);
            fw.write(hl);
            
            DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
            
            int cni = 0;
            // TODO add your handling code here:
            for (Object k : al) {
                
                String key = (String) k;

                double d = 0.0;
                double mw = 0.0;
                double s = 0;


                Vector<Messreihe> cn = hash.get(key);
                String name = key;
                if (cn != null) {
                    // System.out.println( key + " " + (cn!=null) + " " + cn.elementAt(0).yValues.size() );
                    if (cn.size() > 0) {
                        Messreihe r = cn.elementAt(0);
                        if (r != null) {
                            name = r.label;
                        }

                        s = cn.size();
                        d = summe(cn);
                                           // Länge des Intervalls ...
                        mw = d / new Double(jtL.getText());
                    }
                } else {
                }
                DecimalFormat df = new DecimalFormat("0.0000");
  
 
                String line = key + "\t" + s + "\t" + df.format(d) + "\t" + df.format(mw) + "\n" ;
                System.out.println(line);
                bw.write(line);
                
//                dtm.setValueAt( key , cni*4 + 1, column);
//                dtm.setValueAt( s , cni*4 + 2, column);
//                dtm.setValueAt( df.format(d) , cni*4 + 3, column);
//                dtm.setValueAt( df.format(mw) , cni*4 + 4, column);
                
                column++;
                cni++;
                

            }
            bw.flush();
            bw.close();
            
            javax.swing.JOptionPane.showMessageDialog(null, fstat.getAbsolutePath() + "\n\nsimple statistics is done ..." );
        } 
        catch (IOException ex) {
            Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtf_StudieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_StudieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_StudieActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        GTSB2.reset();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    
        GTSB2.reset();
        
        java.util.GregorianCalendar von = new java.util.GregorianCalendar();
        von.clear();
        von.set(2009, 0, 1, 0, 0);

        java.util.GregorianCalendar bis = new java.util.GregorianCalendar();
        bis.clear();
        bis.set(2009, 3, 1, 0, 0);
        
        WikiHistoryExtraction2.setVon( von ); 
        WikiHistoryExtraction2.setBis( bis ); 
        
//        calcINFOFlowEDITS();
        
        // SCHWELLWERT für Linkstärke wählen ...
        double ts1 = initTS();
        calcINFOFlowACCESS( ts1 );
        
    
    }
    
    /** 
     * 
     * Normale Prozedur mit einer Linkstärken-Schwelle 
     * 
     **/
    public void calcINFOFlowACCESS( double ts1 ) { 
        
        int i = getSelectionCN();
        i = i + 1;  // die Container werden ab 1 gezählt.
        
        Vector<Messreihe> grCN = this.hash.get(i + ".CN");
        Vector<Messreihe> grIWL = this.hash.get(i + ".IWL");
        Vector<Messreihe> grAL = this.hash.get(i + ".A.L");
        Vector<Messreihe> grBL = this.hash.get(i + ".B.L");
        
        String name = grCN.elementAt(0).getIdentifier();
        
        System.out.println( "name=" + name );
        
        WikiNode wn = WikiNode.createFromKeyName( name );
        
        System.out.println( ">>> Calc the Density of the Network ... \n" );
        
        NetDensityCalc ndc = new NetDensityCalc(wn, false);
//        ndc.doit( wn );
        
        System.out.println( ">>> INFO Flow ACCESS <<<\n>>>" );
        System.out.println( ">>> Processing CN_" + i + " now. name={" + name + "}" );
        
        System.out.println( "> We have data for: " );
        
        System.out.println( ">   CN         : " + grCN.size() );
        System.out.println( ">   IWL        : " + grIWL.size() );
        System.out.println( ">   AL         : " + grAL.size() );
        System.out.println( ">   BL         : " + grBL.size() );
                
        stdlib.StdRandom.initRandomGen(1);
        
        System.out.println( ">   threshold = " + ts1 );
                
        Color[] c = new Color[6];
        c[0] = Color.black;
        c[1] = Color.blue;
        c[2] = Color.red;
        c[3] = Color.gray;
        c[4] = Color.cyan;
        c[5] = Color.pink;
        
        MultiChartDistComp.initColors(c);
        
        int[] t = new int[6];
        t[0] = 1;
        t[1] = 1;
        t[2] = 1;
        t[3] = 0;
        t[4] = 0;
        t[5] = 0;
        
        MultiChartDistComp.setTypes(t); 
                        
        Messreihe[] r = new Messreihe[6];
        Messreihe[] r2 = new Messreihe[6];
        Messreihe[] r3 = new Messreihe[6];
       
        processDataA( grCN, grIWL, grAL, grBL, false, ndc );
 
        // JUST LINKED
        r[0] = zA.getHistogramNORM("[a] cc(CN,IWL)");
        r[1] = zB.getHistogramNORM("[b] cc(CN,AL)");
        r[2] = zC.getHistogramNORM("(c) cc(CN,BL)");
        
        // ALL PAIRS
        r2[0] = zD.getHistogramNORM("(d) cc(IWL,IWL)");
        r2[1] = zE.getHistogramNORM("(e) cc(AL,AL)");
        r2[2] = zF.getHistogramNORM("(f) cc(BL,BL)");
        
        // ALL PAIRS
        r3[0] = zG.getHistogramNORM("(g) cc(IWL,AL)");
        r3[1] = zH.getHistogramNORM("(h) cc(IWL,BL)");
        r3[2] = zI.getHistogramNORM("(h) cc(AL,BL)");
        
                
//        _showSuggestions(suggestA, "raw A I" );
//        _showSuggestions(suggestB, "raw B I" );
//        _showSuggestions(suggestC, "raw A B" );
//
//        _showSuggestions(suggestD, "raw A A" );
//        _showSuggestions(suggestE, "raw B B" );
//        _showSuggestions(suggestF, "raw I I" );
//
        processDataA( grCN, grIWL, grAL, grBL, true, ndc );
                         
        // JUST LINKED
        r[3] = zA.getHistogramNORM("[a] cc(CN,IWL)");
        r[4] = zB.getHistogramNORM("[b] cc(CN,AL)");
        r[5] = zC.getHistogramNORM("(c) cc(CNL,BL)");
        
        // ALL PAIRS
        r2[3] = zD.getHistogramNORM("(d) cc(IWL,IWL)");
        r2[4] = zE.getHistogramNORM("(e) cc(AL,AL)");
        r2[5] = zF.getHistogramNORM("(f) cc(IWL,BL)");
        
        // ALL PAIRS
        r3[3] = zG.getHistogramNORM("(g) cc(IWL,AL)");
        r3[4] = zH.getHistogramNORM("(h) cc(IWL,BL)");
        r3[5] = zI.getHistogramNORM("(h) cc(AL,BL)");
         
        MultiChartDistComp.setDefaultRange = true;
        MultiChartDistComp.xRangDEFAULT_MAX = 1.0;
        MultiChartDistComp.xRangDEFAULT_MIN = -1.0;
        MultiChartDistComp.yRangDEFAULT_MIN = 0.0;
        MultiChartDistComp.yRangDEFAULT_MAX = 1.0;
        
        MultiChartDistComp.setSymbols();
        
        // HIER MUSS ICH DANN ZÄHLEN ... 
        
        MultiChartDistComp.open( r , "["+ name +"] just linked page-pairs" , "link strength" , "nr of links" , true );    
        MultiChartDistComp.open( r2 , "["+ name +"] all pairs (INTRA)" , "link strength" , "nr of links" , true );       
        MultiChartDistComp.open( r3 , "["+ name +"] all pairs (INTER)" , "link strength" , "nr of links" , true );       
        
        ndc._flushNetworks( 0 );
        /**
         * STORE SUCH LISTS in a external FILE ...
         */
        int uu = 0;
        for( ExtendedNodePairSFE p : linked ) { 
            uu++;
            System.out.println( uu + "+" + p.toString() );
        }
        
        int ii = 0;
        for( ExtendedNodePairSFE p : notLinked ) { 
            ii++;
            System.out.println( ii + "-" + p.toString() );
            
        }

        System.out.println( "\n" + "*******" );
        
        System.out.println( "-" + ii );
        System.out.println( "+" + uu );
        
        /**
         * RESET internal memory ....
         */

        
    }     

    public void calcINFOFlowEDITS() { 
        
        int i = getSelectionCN();
        i = i + 1;  // die Container werden ab 1 gezählt.
        
        Vector<Messreihe> grCN = this.hash.get(i + ".CN");
        Vector<Messreihe> grIWL = this.hash.get(i + ".IWL");
        Vector<Messreihe> grAL = this.hash.get(i + ".A.L");
        Vector<Messreihe> grBL = this.hash.get(i + ".B.L");
        
        String name = grCN.elementAt(0).getLabel();
        

        System.out.println( ">>> INFO Flow EDITS <<<\n>>>" );
        System.out.println( ">>> Processing : " + i + " now. [" + name + "]" );
        System.out.println( ">   CN         : " + grCN.size() );
        System.out.println( ">   IWL        : " + grIWL.size() );
        System.out.println( ">   AL         : " + grAL.size() );
        System.out.println( ">   BL         : " + grBL.size() );
        
        
        stdlib.StdRandom.initRandomGen(1);
        
        initTS();

        System.out.println( ">   ts         : " + ts );
                
        Color[] c = new Color[6];
        c[0] = Color.black;
        c[1] = Color.blue;
        c[2] = Color.red;
        c[3] = Color.black;
        c[4] = Color.blue;
        c[5] = Color.red;
        MultiChartDistComp.initColors(c);
        
        int[] t = new int[6];
        t[0] = 1;
        t[1] = 1;
        t[2] = 1;
        t[3] = 0;
        t[4] = 0;
        t[5] = 0;
        MultiChartDistComp.setTypes(t);
                        
        Messreihe[] r = new Messreihe[6];
        Messreihe[] r2 = new Messreihe[6];
        Messreihe[] r3 = new Messreihe[6];
       
        processDataE( grCN, grIWL, grAL, grBL, false );
 
        r[0] = zA.getHistogramNORM("es (CN,IWL)");
        r[1] = zB.getHistogramNORM("es (CN,AL)");
//        r[2] = zC.getHistogramNORM("es (CN,BL)");
//        
//        r2[0] = zD.getHistogramNORM("es (AL,IWL)");
//        r2[1] = zE.getHistogramNORM("es (BL,IWL)");
//        r2[2] = zF.getHistogramNORM("es (AL,BL)");
//        
//        r3[0] = zG.getHistogramNORM("es (AL,AL)");
//        r3[1] = zH.getHistogramNORM("es (BL,BL)");
//        r3[2] = zI.getHistogramNORM("es (IWL,IWL)");
                
//        _showSuggestions(suggestA, "raw A I" );
//        _showSuggestions(suggestB, "raw B I" );
//        _showSuggestions(suggestC, "raw A B" );
//
//        _showSuggestions(suggestD, "raw A A" );
//        _showSuggestions(suggestE, "raw B B" );
//        _showSuggestions(suggestF, "raw I I" );

        processDataE( grCN, grIWL, grAL, grBL, true );
                        
        r[3] = zA.getHistogramNORM("es *CN,IWL*");
        r[4] = zB.getHistogramNORM("es *CN,AL*");
//        r[5] = zC.getHistogramNORM("es *CN,BL*");
//        
//        r2[3] = zD.getHistogramNORM("es *AL,IWL*");
//        r2[4] = zE.getHistogramNORM("es *BL,IWL*");
//        r2[5] = zF.getHistogramNORM("es *AL,BL*");
//        
//        r3[3] = zG.getHistogramNORM("es *AL,AL*");
//        r3[4] = zH.getHistogramNORM("es *BL,BL*");
        r3[5] = zI.getHistogramNORM("es *IWL,IWL*");
         
        MultiChartDistComp.setDefaultRange = true;
        MultiChartDistComp.xRangDEFAULT_MAX = 1.0;
        MultiChartDistComp.xRangDEFAULT_MIN = -1.0;
        MultiChartDistComp.yRangDEFAULT_MIN = 0.0;
        MultiChartDistComp.yRangDEFAULT_MAX = 1.0;
        
        MultiChartDistComp.open( r , "ES :: CN -> connected" , "link strength" , "nr of links" , true );    
//        MultiChartDistComp.open( r2 , "CC :: inter groups " , "link strength" , "nr of links" , true );       
//        MultiChartDistComp.open( r3 , "CC :: INTRA groups" , "link strength" , "nr of links" , true );       
        
        /**
         * STORE SUCH LISTS in a external FILE ...
         */
        int uu = 0;
        for( ExtendedNodePairSFE p : linked ) { 
            uu++;
            System.out.println( uu + "+" + p.toString() );
        }
        
        int ii = 0;
        for( ExtendedNodePairSFE p : notLinked ) { 
            ii++;
            System.out.println( ii + "-" + p.toString() );
            
        }

        System.out.println( "\n" + "*******" );
        
        System.out.println( "-" + ii );
        System.out.println( "+" + uu );
        
        /**
         * RESET internal memory ....
         */

        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        
        JFileChooser jfc = new JFileChooser();
            jfc.setSize(800, 600);
            jfc.setCurrentDirectory(new File("/home/kamir/ANALYSIS/Wikipedia/Characterisierung_Der_Methode"));
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            jfc.showOpenDialog(this);
            File f = jfc.getSelectedFile();
            
            jtLF.setText( f.getAbsolutePath() );

            
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
                JFileChooser jfc = new JFileChooser();
            jfc.setSize(800, 600);
            jfc.setCurrentDirectory(new File("/user/kamir/wikipedia/corpus"));
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            jfc.showOpenDialog(this);
            File f = jfc.getSelectedFile();
            
            jtf_OUTPUT.setText( f.getAbsolutePath() );
    }//GEN-LAST:event_jButton10ActionPerformed

    double ts = 0.7;
    static HaeufigkeitsZaehlerDoubleSIMPLE zA = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zB = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zC = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zD = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zF = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zG = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zH = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zI = null;
    
    static HaeufigkeitsZaehlerDoubleSIMPLE zAE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zBE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zCE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zDE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zEE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zFE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zGE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zHE = null;
    static HaeufigkeitsZaehlerDoubleSIMPLE zIE = null;
    
    // public Messreihe[] getRows Vector<Messreihe>
    Vector<ExtendedNodePairSFE> suggestA = null;
    Vector<ExtendedNodePairSFE> suggestB = null;
    Vector<ExtendedNodePairSFE> suggestC = null;
    Vector<ExtendedNodePairSFE> suggestD = null;
    Vector<ExtendedNodePairSFE> suggestE = null;
    Vector<ExtendedNodePairSFE> suggestF = null;
        
    private void processDataA( Vector<Messreihe> grCN, Vector<Messreihe> grIWL, Vector<Messreihe> grAL, Vector<Messreihe> grBL, 
                               boolean shuffle, NetDensityCalc ndc) {
        
        suggestA = new Vector<ExtendedNodePairSFE>();
        suggestB = new Vector<ExtendedNodePairSFE>();
        suggestC = new Vector<ExtendedNodePairSFE>();

        suggestD = new Vector<ExtendedNodePairSFE>();
        suggestE = new Vector<ExtendedNodePairSFE>();
        suggestF = new Vector<ExtendedNodePairSFE>();
        
        StringBuffer data = new StringBuffer("***** shuffle=" + shuffle + " *****\n");
        data.append("*****      ts=" + ts + " *****\n");
        
        // cc - analyse
//        zA = CCProzessor.getAll( grCN.elementAt(0) , grIWL , shuffle, ndc , "zA", ts, null );
//        zB = CCProzessor.getAll( grCN.elementAt(0) , grAL , shuffle, ndc , "zB", ts , null);
//        zC = CCProzessor.getAll( grCN.elementAt(0) , grBL , shuffle, ndc , "zC", ts, null );
//        data.append( "zA.size : " + zA.dists.size() + "\t" + zA.getOver( ts ) + "\n" );
//        data.append( "zB.size : " + zB.dists.size() + "\t" + zB.getOver( ts ) + "\n" );
//        data.append( "zC.size : " + zC.dists.size() + "\t" + zC.getOver( ts ) + "\n" );
//        
//        zD = CCProzessor.getPartial( grIWL , grIWL, shuffle , ts, suggestA, ndc , "zD");
//        zE = CCProzessor.getPartial( grAL , grAL, shuffle , ts, suggestB, ndc , "zE");
//        zF = CCProzessor.getPartial( grBL , grBL, shuffle , ts, suggestC, ndc , "zF");
//        data.append( "zD.size : " + zD.dists.size() + "\t" + zD.getOver( ts ) + "\n" );
//        data.append( "zE.size : " + zE.dists.size() + "\t" + zE.getOver( ts ) + "\n" );
//        data.append( "zF.size : " + zF.dists.size() + "\t" + zF.getOver( ts ) + "\n" );
//
//        zG = CCProzessor.getPartial( grIWL , grAL, shuffle , ts, suggestD, ndc , "zG");
//        zH = CCProzessor.getPartial( grIWL , grBL, shuffle , ts, suggestE, ndc , "zH");
//        zI = CCProzessor.getPartial( grAL , grBL, shuffle , ts, suggestF, ndc , "zI");
//        data.append( "zG.size : " + zG.dists.size() + "\t" + zG.getOver( ts ) + "\n" );
//        data.append( "zH.size : " + zH.dists.size() + "\t" + zH.getOver( ts ) + "\n" );
//        data.append( "zI.size : " + zI.dists.size() + "\t" + zI.getOver( ts ) + "\n" );
        
        data.append( "\n" );
        try {
            ndc.logToAnalysisFile( data.toString() , "CC.INFOFLOW." + shuffle );
        } 
        catch (Exception ex) {
            Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }
    
    private void processDataE(Vector<Messreihe> grCN, Vector<Messreihe> grIWL, Vector<Messreihe> grAL, Vector<Messreihe> grBL, boolean shuffle) {
        
//        suggestA = new Vector<ExtendedNodePairSFE>();
//        suggestB = new Vector<ExtendedNodePairSFE>();
//        suggestC = new Vector<ExtendedNodePairSFE>();
//
//        suggestD = new Vector<ExtendedNodePairSFE>();
//        suggestE = new Vector<ExtendedNodePairSFE>();
//        suggestF = new Vector<ExtendedNodePairSFE>();
//        
//        zA = ESProcessor2.getAll( grCN.elementAt(0) , grIWL , shuffle)[0];
//        zB = ESProcessor2.getAll( grCN.elementAt(0) , grAL , shuffle)[0];
//        zC = ESProcessor2.getAll( grCN.elementAt(0) , grBL , shuffle)[0];
        
//        zD = ESProcessor2.getPartial( grAL , grIWL, shuffle , ts, suggestA)[0];
//        zE = ESProcessor2.getPartial( grBL , grIWL, shuffle , ts, suggestB)[0];
//        zF = ESProcessor2.getPartial( grAL , grBL, shuffle , ts, suggestC)[0];
//
//        zG = ESProcessor2.getPartial( grAL , grAL, shuffle , ts, suggestD)[0];
//        zH = ESProcessor2.getPartial( grBL , grBL, shuffle , ts, suggestE)[0];
//        zI = ESProcessor2.getPartial( grIWL , grIWL, shuffle , ts, suggestF)[0];
        
        
        
        
//        zAE = ESProcessor.getAll( grCN.elementAt(0) , grIWL , shuffle)[0];
//        zBE = ESProcessor.getAll( grCN.elementAt(0) , grAL , shuffle)[0];
//        zCE = ESProcessor.getAll( grCN.elementAt(0) , grBL , shuffle)[0];

    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        if ( args.length == 5 ) a = args;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               AdvancedSequenceFileExplorer exp = new AdvancedSequenceFileExplorer();
               exp.setArgs( a ); 
               exp.setVisible(true);
            }
        });
    }
    static String[] a = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField STATFILELABEL;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JCheckBox jcbDT;
    private javax.swing.JCheckBox jcbMW;
    private javax.swing.JCheckBox jcbRATIO;
    private javax.swing.JCheckBox jcbRAW;
    private javax.swing.JCheckBox jcbWT;
    private javax.swing.JLabel jlL;
    private javax.swing.JLabel jlPATTERN;
    private javax.swing.JLabel jlZ;
    private javax.swing.JTextField jtJAHR;
    private javax.swing.JTextField jtL;
    private javax.swing.JTextField jtLF;
    private javax.swing.JTextField jtMONAT;
    private javax.swing.JTextField jtTAG;
    private javax.swing.JTextField jtfEXT;
    private javax.swing.JTextField jtf_OUTPUT;
    private javax.swing.JTextField jtf_Studie;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    String fn = null;

    private void getFileName() {
        fn = this.jtf_OUTPUT.getText();
    }
    
    SequenceFile.Reader reader = null;
    Path path = null;
    FileSystem fs = null;
    Configuration config = null;
    boolean useHDFS = true;

    public void initFileSystem(String _fn) throws IOException {
        config = new Configuration();
        fn = _fn;
        System.out.println(">>HDFS<< :: " + fn);

        config.addResource(new Path("/etc/hadoop/conf/core-site.xml"));
        config.addResource(new Path("/etc/hadoop/conf/hdfs-site.xml"));

        fs = FileSystem.get(config);

        path = new Path(fn);
    }
        
    private void initFileSystem() throws IOException {
        config = new Configuration();

        System.out.println(">>HDFS<< :: " + fn);

        config.addResource(new Path("/etc/hadoop/conf/core-site.xml"));
        config.addResource(new Path("/etc/hadoop/conf/hdfs-site.xml"));

        fs = FileSystem.get(config);

        path = new Path(fn);
    }
    
    int z = 0;
    int zz = 0;
    
    static int binLevel = 0;
    static int[] BINNING_RAW = {1, 24, 24 * 7, 1};
    static int[] BINNING_AV = {24, 7, 4, 1};

    private void _getMetaData(boolean multi) throws IOException {

        DefaultListModel dlm = new DefaultListModel();
        this.jList1.setModel(dlm);

        if (this.jRadioButton3.isSelected()) {
            binLevel = 0;
        }
        if (this.jRadioButton1.isSelected()) {
            binLevel = 1;
        }
        if (this.jRadioButton2.isSelected()) {
            binLevel = 2;
        }
        if (this.jRadioButton4.isSelected()) {
            binLevel = 3;
        }

        path = new Path(fn);

        reader = new SequenceFile.Reader(fs, path, config);

        System.out.println("==> current binning  aw   : " + BINNING_AV[ binLevel]);
        System.out.println("==> current binning  raw  : " + BINNING_RAW[ binLevel]);
        System.out.println("--> process bucket        : " + fn);
        System.out.println("--> compression-codes     : " + reader.getCompressionCodec());
        System.out.println("--> key-classename        : " + reader.getKeyClassName());
        System.out.println("--> value-classname       : " + reader.getValueClassName());

        // is the listfile available ???
        File file = new File(jtLF.getText());
        System.out.println(">>> " + file.getAbsolutePath() + " --> " + file.exists());


        // Wieviele CN sind im merged listfile?
        zz = 0;
        try {
            zz = initLastIndex(file);
        } 
        catch (Exception ex) {
            zz = 1;
        }
        this.jlZ.setText("" + zz);
        
        System.out.println(">>> zz=" + zz );

        // LISTFILE lesen ...
         localNet.loadListFile(file);

        if (multi) {

            System.out.println(">>> MULTI-mode ==> ON");

            z = Integer.parseInt(javax.swing.JOptionPane.showInputDialog(" Anzahl CN=", new Integer(zz)));
            for (int i = 0; i < z; i++) {

                al = new Vector<Messreihe>();
                bl = new Vector<Messreihe>();
                iwl = new Vector<Messreihe>();
                cn = new Vector<Messreihe>();

                hash.put((i + 1) + ".A.L", al);
                hash.put((i + 1) + ".B.L", bl);
                hash.put((i + 1) + ".CN", cn);
                hash.put((i + 1) + ".IWL", iwl);

            }
        } 
        else {

            System.out.println(">>> MULTI-mode ==> OFF");

            al = new Vector<Messreihe>();
            bl = new Vector<Messreihe>();
            iwl = new Vector<Messreihe>();
            cn = new Vector<Messreihe>();

            hash.put("A.L", al);
            hash.put("B.L", bl);
            hash.put("CN", cn);
            hash.put("IWL", iwl);

        }
        
        
    }
    
    
    Vector<Messreihe> al = null;
    Vector<Messreihe> bl = null;
    Vector<Messreihe> iwl = null;
    Vector<Messreihe> cn = null;
    
    
    static Hashtable<String, Vector<Messreihe>> hash = new Hashtable<String, Vector<Messreihe>>();
    LocalWikipediaNetwork2 localNet = new LocalWikipediaNetwork2();
    
    /**
     * Nun werden die Reihen geladen ...
     *
     * @param j
     * @param part
     * @throws IOException
     */
    private void listContent(int j, String part) throws IOException {
        
        PRE = javax.swing.JOptionPane.showInputDialog("PRE:");
        
        fs = FileSystem.get(config);

        path = new Path(fn);
        reader = new SequenceFile.Reader(fs, path, config);

        Vector<String> groups = new Vector<String>();

        int LIMIT = j;
        boolean goOn = true;
        int i = 0;
        int c = 0;
        int noG = 0;
        int error = 0;
        
        while (goOn && i <= LIMIT) {
            c++;

            Text key = new Text();
            Text val = new Text();

            goOn = reader.next(key);

            reader.getCurrentValue(val);

            Messreihe mr = new Messreihe();
            mr.setIdentifier( key.toString() );
            mr.setDescription(i + " ) " + fn + "_[" + key.toString() + "]");
            mr.setLabel(key.toString());

            int J = Integer.parseInt(jtJAHR.getText());
            int M = Integer.parseInt(jtMONAT.getText());
            int T = Integer.parseInt(jtTAG.getText());

            int L = Integer.parseInt(jtL.getText());

            Calendar cal = new GregorianCalendar(J, M - 1, T, 0, 0);
//            Calendar cal = new GregorianCalendar(2007, 11, 1, 0, 0);
            int tsFRAME_days = L;
            int tsFRAME_hours = 24 * tsFRAME_days;


            try {
                
                
                        
                    Messreihe mr2 = expandTimeStampMap(val, cal, tsFRAME_hours, mr);
                
                    String group = lookupGroupLabel(key);
                    if ( group != null ) {

    // MATH TRANSFORM
                        if (BINNING_RAW[binLevel] != 1) {
                            mr2 = mr2.setBinningX_sum(BINNING_RAW[binLevel]);
                        }

                        if (jcbWT.isSelected()) {
                            mr2 = mr2.normalizeByPeriodeTrend(mr2, 24 * 7);
                        } else if (jcbDT.isSelected()) {
                            mr2 = mr2.normalizeByPeriodeTrend(mr2, 24);
                        }



                        if (jCheckBox1.isSelected()) {
                            mr2.calcLog10_for_Y();
                        }


                        if (groups.contains(group)) {

                        } 
                        else {
                            groups.add(group);
                        }

                        if (group != null) {
    //                        System.out.println("g=" + group);

                            

//                            if ( group.startsWith( PRE ) ) {

                                boolean use = true;
                                
                                if ( group.endsWith("B.L") )
                                    use = Math.random() < samplingB;

                                if ( group.endsWith("A.L") )
                                    use = Math.random() < samplingA;
                                    
                                if( use ) {    
                                    Vector<Messreihe> vmr = hash.get(group);
                                    if (vmr != null) {
                                        vmr.add(mr2);
                                    }

                                    i = i + 1;
                                }
//                            }
                        }
                        else { 

                        }

                    }
                    else { 
                        noG++;

                    }

                 
            } catch (Exception ex) {
                // Logger.getLogger(TSBucket.class.getName()).log(Level.SEVERE, null, ex);
                error = error + 1;
            }

            int code = 1;

        }
        
        System.out.println("--> nr of (k,v)-pairs : " + c );
        System.out.println("--> nr of records     : " + (i - 1));
        System.out.println("--> no group          : " + noG );
        System.out.println("--> errors            : " + error );

        System.out.println("> groups : " + groups.toString());
        
     
        
    }
    
    
     String PRE = "8";
    
    Hashtable<Integer,WikiNode> loadedCENTRALNodes = new Hashtable<Integer,WikiNode>();
    
    boolean initialized = false;

    private Messreihe expandTimeStampMap(Text val, Calendar calVON, int tsFRAME_hours, Messreihe mr) {
        
        
        
        String dataHash = val.toString().substring(1, val.toString().length() - 2);
        
//        System.out.println( "work on : " + mr.getLabel() );
        
               
        long t0 = calVON.getTimeInMillis();

        Calendar calBIS = (Calendar) calVON.clone();
        calBIS.add(Calendar.HOUR, tsFRAME_hours);

        if (!initialized) {
            System.out.println(calVON.getTime());
            System.out.println(calBIS.getTime());
            initialized = true;
        }

        double[] data = new double[tsFRAME_hours];
        for (int i = 0; i < tsFRAME_hours; i++) {
            data[i] = 0.0;
        }

        String[] pairs = dataHash.split(", ");
        for (String p : pairs) {
            String[] kv = p.split("=");
            Long k = Long.parseLong(kv[0]);
            Integer v = Integer.parseInt(kv[1]);
            Date d = new Date(k * 1000);
            if (d.after(calVON.getTime()) && d.before(calBIS.getTime())) {
                // System.out.println( d );
                long dt = (k * 1000) - t0;
                int i = (int) (dt / (1000 * 60 * 60));
                data[i] = v;
                // System.out.println( );
            };
        }

        for (int i = 0; i < tsFRAME_hours; i++) {
            mr.addValue(data[i]);
        }
        return mr;
    }

    private String lookupGroupLabel(Text key) {
        return localNet.getGroup(key);
    }

    private void sumUpData() {
    }

    private void sumUpData(int i) {
    }

    private void showCharts1() {
        MultiChart.open(al, "A.L", "t", "#access", false, getMrVectorInfo(al), null);
        MultiChart.open(bl, "B.L", "t", "#access", false, getMrVectorInfo(bl), null);
        MultiChart.open(iwl, "IWL", "t", "#access", false, getMrVectorInfo(iwl), null);
        MultiChart.open(cn, "CN", "t", "#access", false, getMrVectorInfo(cn), null);
    }

    private JComponent[] showChartsRAW(int i, boolean multi) {

        JComponent[] c = new JComponent[4];
        Vector<Messreihe> al = hash.get(i + "." + "A.L");
        Vector<Messreihe> bl = hash.get(i + "." + "B.L");
        Vector<Messreihe> iwl = hash.get(i + "." + "IWL");
        Vector<Messreihe> cn = hash.get(i + "." + "CN");

//        Vector<Messreihe> al = hash.get("A.L");
//        Vector<Messreihe> bl = hash.get("B.L");
//        Vector<Messreihe> iwl = hash.get("IWL");
//        Vector<Messreihe> cn = hash.get("CN");

        if (al != null) {
            MultiChart mc = MultiChart.open2(al, i + " A.L", "t", "#access", false, getMrVectorInfo(al));
            c[0] = (JComponent) mc.getCP();
        }
        if (bl != null) {
            MultiChart mc = MultiChart.open2(bl, i + " B.L", "t", "#access", false, getMrVectorInfo(bl));
            c[1] = (JComponent) mc.getCP();
        }
        if (iwl != null) {
            MultiChart mc = MultiChart.open2(iwl, i + " IWL", "t", "#access", false, getMrVectorInfo(iwl));
            c[2] = (JComponent) mc.getCP();
        }
        if (cn != null) {
            MultiChart mc = MultiChart.open2(cn, i + " CN", "t", "#access", false, getMrVectorInfo(cn));
            c[3] = (JComponent) mc.getCP();
        }
        return c;
    }

    private void showChartsAV() {

        System.out.println(">>> SHOW >>> ChartsAV() ...");
        Vector<Messreihe> v = new Vector<Messreihe>();
        v.addAll(av(al, null, BINNING_AV[binLevel]));
        v.addAll(av(bl, null, BINNING_AV[binLevel]));
        v.addAll(av(iwl, null, BINNING_AV[binLevel]));
        v.addAll(av(cn, null, BINNING_AV[binLevel]));

        gtsb.putAll(v);

        // String CN_Name = hash.get("CN").elementAt(0).label;
        MultiChart.open(v, "", "t", "<#access>", true, "", null);
    }

    /**
     * 
     * TODO : PRIO1
     * 
     * Hier muss auf den cache zugegriffen werden ...
     * 
     * 
     * @param i
     * @param multi
     * @return 
     */
    private JComponent[] showChartsAV(int i, boolean multi) {

        
        Vector<Messreihe> al = hash.get(i + "." + "A.L");
        Vector<Messreihe> bl = hash.get(i + "." + "B.L");
        Vector<Messreihe> iwl = hash.get(i + "." + "IWL");
        Vector<Messreihe> cn = hash.get(i + "." + "CN");

//        Vector<Messreihe> al = hash.get("A.L");
//        Vector<Messreihe> bl = hash.get("B.L");
//        Vector<Messreihe> iwl = hash.get("IWL");
//        Vector<Messreihe> cn = hash.get("CN");

        int B2 = 24;
        String CN_Name = i + ".CN";

        Vector<Messreihe> v = new Vector<Messreihe>();
        if (al != null) {
            Vector<Messreihe> vmr = av(al, null, BINNING_AV[binLevel]);
            vmr.elementAt(0).setLabel("A.L");
            v.addAll(vmr);
        }
        if (bl != null) {
            Vector<Messreihe> vmr = av(bl, null, BINNING_AV[binLevel]);
            vmr.elementAt(0).setLabel("B.L");
            v.addAll(vmr);
        }
        if (iwl != null) {
            Vector<Messreihe> vmr = av(iwl, null, BINNING_AV[binLevel]);
            vmr.elementAt(0).setLabel("IWL");
            v.addAll(vmr);
        }
        if (cn != null) {
            Vector<Messreihe> vmr = av(cn, null, BINNING_AV[binLevel]);
            vmr.elementAt(0).setLabel("CN");
            v.addAll(vmr);
        }

        JComponent[] c = new JComponent[1];
        
        
        MultiChart mc = MultiChart.open2(v, CN_Name + " AV", "t", "< log(access) >", true, "");
        c[0] = (JComponent) mc.getCP();


        return c;
    }

    private void showChartsSUM() {
        MultiChart.open(sum(al), "A.L", "t", "log( #access )", false, getMrVectorInfo(al), null);
        MultiChart.open(sum(bl), "B.L", "t", "log( #access)", false, getMrVectorInfo(bl), null);
        MultiChart.open(sum(iwl), "IWL", "t", "log( #access)", false, getMrVectorInfo(iwl), null);
        MultiChart.open(sum(cn), "CN", "t", "log( #access)", false, getMrVectorInfo(cn), null);
    }

    private String getMrVectorInfo(Vector<Messreihe> al) {
        StringBuffer sb = new StringBuffer();
        sb.append(al.size() + " rows" + "\n\n");
        for (Messreihe mr : al) {
            sb.append(mr.summeY() + " : " + mr.getLabel() + "\n");
        }
        return sb.toString();
    }

    private static Messreihe av2(Vector<Messreihe> al, String label) {
        int i = 0;
        Messreihe mr = new Messreihe();
        for (Messreihe m : al) {
            mr = mr.add(m);
            i++;
        }
        mr.divide_Y_by((double) i);
        mr.setLabel(label);

        mr = mr.setBinningX_sum(BINNING_AV[binLevel]);

        return mr;
    }

    private Vector<Messreihe> av(Vector<Messreihe> al, String label, int b2) {
        Vector<Messreihe> d = new Vector<Messreihe>();
        int i = 0;
        Messreihe mr = new Messreihe();
        for (Messreihe m : al) {
            mr = mr.add(m);
            i++;
        }
        mr.divide_Y_by((double) i);
        if (label != null) {
            mr.setLabel(label);
        }
        if (b2 != 1) {
            mr = mr.setBinningX_sum(b2);
        }
        d.add(mr);
        return d;
    }

    private double summe(Vector<Messreihe> cn) {
        Messreihe mr = new Messreihe();
        for (Messreihe m : cn) {
            mr = mr.add(m);
            // System.out.println(" \t\t" + m.label );
        }
        double d = mr.sumYValues();
        return d;
    }

    private Vector<Messreihe> sum(Vector<Messreihe> cn) {
        Vector<Messreihe> d = new Vector<Messreihe>();
        Messreihe mr = new Messreihe();
        for (Messreihe m : al) {
            mr = mr.add(m);
        }
        d.add(mr);
        return d;
    }

//    private Vector<Messreihe> binning(Vector<Messreihe> v, int i, String l) {
//        Vector<Messreihe> b = new Vector<Messreihe>();
//        for (Messreihe m : v) {
//            m = m.setBinningX_sum(i);
//            m.setLabel(l);
//            b.add(m);
//        }
//        return b;
//    }
//    private Messreihe binning2(Vector<Messreihe> vv, int i, String l) {
//        Messreihe v = vv.elementAt(0).setBinningX_sum(i);
//        v.setLabel(l);
//        return v;
//    }
    public static JComponent[] showChartsRatio(int i, boolean multi) {
        JComponent[] c = new JComponent[1];

        if (multi) {
            Vector<Messreihe> al = hash.get(i + "." + "A.L");
            Vector<Messreihe> bl = hash.get(i + "." + "B.L");
            Vector<Messreihe> iwl = hash.get(i + "." + "IWL");
            Vector<Messreihe> cn = hash.get(i + "." + "CN");

            Vector<Messreihe> v = new Vector<Messreihe>();

            Messreihe a2 = av2(al, i + ".A.L");
            Messreihe a1 = av2(cn, i + ".CN");

            Messreihe b2 = av2(bl, i + ".B.L");
            Messreihe b1 = av2(iwl, i + ".IWL");

            Messreihe r1LOCAL = a1.divide_by(a2);
            Messreihe r2GLOBAL = b1.divide_by(b2);

            v.add(r1LOCAL);
            v.add(r2GLOBAL);

            gtsb.rows.put( i + ".RLocal", r1LOCAL);
            gtsb.rows.put( i + ".RGlobal", r2GLOBAL);

            c = new JComponent[1];
            c[0] = new JPanel();

            Vector<Messreihe> vv = (Vector<Messreihe>) hash.get(i + ".CN");
            String CN_Name = "CN?";
            if (vv != null) {
                if (vv.size() > 0) {
                    CN_Name = vv.elementAt(0).label;
                    MultiChart mc = MultiChart.open2(v, CN_Name, "t", "RATIO", true, "");
                    c[0] = (JComponent) mc.getCP();

                }
            }
        } else {

            Vector<Messreihe> al = hash.get("A.L");
            Vector<Messreihe> bl = hash.get("B.L");
            Vector<Messreihe> iwl = hash.get("IWL");
            Vector<Messreihe> cn = hash.get("CN");

            Vector<Messreihe> v = new Vector<Messreihe>();

            Messreihe a2 = av2(al, "A.L");
            Messreihe a1 = av2(cn, "CN");

            Messreihe b2 = av2(bl, "B.L");
            Messreihe b1 = av2(iwl, "IWL");

            Messreihe r1LOCAL = a1.divide_by(a2);
            Messreihe r2GLOBAL = b1.divide_by(b2);

            v.add(r1LOCAL);
            v.add(r2GLOBAL);

            gtsb.rows.put("RLocal", r1LOCAL);
            gtsb.rows.put("RGlobal", r2GLOBAL);

            gtsb.rows.put("A.L", a2);
            gtsb.rows.put("CN", a1);

            gtsb.rows.put("B.L", b2);
            gtsb.rows.put("IWL", b1);

            c = new JComponent[1];
            c[0] = new JPanel();

            Vector<Messreihe> vv = (Vector<Messreihe>) hash.get(i + ".CN");
            String CN_Name = "CN?";
            if (vv != null) {
                if (vv.size() > 0) {
                    //                CN_Name = vv.elementAt(0).label;
                    //                MultiChart mc = MultiChart.open2(v, CN_Name, "t", "RATIO", true, "");
                    //                c[0] = (JComponent) mc.cp;
                }
            }

        }
        //String CN_Name = hash.get("CN").elementAt(0).label;
        return c;
    }

    private void showChartsRatio() {
        Vector<Messreihe> v = new Vector<Messreihe>();

        Messreihe a2 = av2(al, "A.L");
        Messreihe a1 = av2(cn, "CN");

        Messreihe b2 = av2(bl, "B.L");
        Messreihe b1 = av2(iwl, "IWL");

        Messreihe r1LOCAL = a1.divide_by(a2);
        Messreihe r2GLOBAL = b1.divide_by(b2);

        v.add(r1LOCAL);
        v.add(r2GLOBAL);

        gtsb.rows.put("RLocal", r1LOCAL);
        gtsb.rows.put("RGlobal", r2GLOBAL);

        gtsb.rows.put("A.L", a2);
        gtsb.rows.put("CN", a1);

        gtsb.rows.put("B.L", b2);
        gtsb.rows.put("IWL", b1);


        String CN_Name = hash.get("CN").elementAt(0).label;
        MultiChart.open(v, CN_Name, "t", "<#access>", true, "", null);
    }

    /**
     *
     * @param file
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
    private int initLastIndex(File file) throws FileNotFoundException, IOException {
        int max = 0;
        BufferedReader br = new BufferedReader(new FileReader(file));
        while (br.ready()) {
            String line = br.readLine();
            if (line != null) {
                // System.out.println(line);
                String[] fields = line.split("\t");
//                System.out.println(fields[0]);

                int ix = fields[0].indexOf(".");

                String f2 = fields[0].substring(0, ix);

                int i = Integer.parseInt(f2);
//                System.out.println(i);
                if (i > max) {
                    max = i;
                }
            }
        }
        zCN = max;
        return max;
    }
    int zCN = 0;

//    private Vector<Messreihe> log(Vector<Messreihe> al) {
//        for (Messreihe mr : al) {
//            mr.calcLog10_for_Y();
//        }
//        return al;
//    }
    private void openFrame4Index(int i, boolean multi) {
        JComponent[][] charts = new JComponent[2][3];
        charts[0][0] = (JComponent) new JPanel();
        charts[1][0] = (JComponent) new JPanel();

        charts[0][1] = (JComponent) new JPanel();
        charts[1][1] = (JComponent) new JPanel();

        charts[0][2] = (JComponent) new JPanel();
        charts[1][2] = (JComponent) new JPanel();

        // Mittelwerte der GRUPPEN
        if (jcbMW.isSelected()) {
            JComponent[] c = showChartsAV(i + 1, multi);
            charts[0][2] = c[0];
        }

        
        if (jcbRAW.isSelected()) {
            JComponent[] c = showChartsRAW(i + 1, multi);
            charts[0][0] = c[0];
            charts[1][0] = c[1];
            charts[0][1] = c[3];
            charts[1][1] = c[2];
        }

        if (jcbRATIO.isSelected()) {
            JComponent[] c = showChartsRatio(i + 1, multi);
            charts[1][2] = c[0];
        }

        ChartFrame cf = ChartFrame.open(charts, "CN", "..." );
        cf.setSize(Toolkit.getDefaultToolkit().getScreenSize());
    }
    
    double samplingA = 0.1;
    double samplingB = 0.01;

    private void initListe() {
        
        DefaultListModel dlm = (DefaultListModel) this.jList1.getModel();
        
        for (int i = 0; i < zCN; i++) {
        
            String key = (i + 1) + "." + "CN";
            System.out.println("LISTE: " + key );
            Vector<Messreihe> cn = hash.get(key);
            String name = key;
            if (cn != null) {
            
                System.out.println(key + " " + (cn != null) + " " );//+ cn.elementAt(0).yValues.size());

                if (cn.size() > 0) {
                    Messreihe r = cn.elementAt(0);
                    if (r != null) {
                        name = r.getLabel() + "(" + r.getIdentifier() + ") [" + key + "]";
                    }
                    else {
                        name = key;
                    }
                }
                
            }
            dlm.addElement(name);
        }
    }
    static GTSB2 gtsb = null;

    private void _initGlobalTSBuffer() {
        System.out.println(">>> GTSB ist initialisiert ...");
        gtsb = new GTSB2();
    }

    private void setArgs(String[] args) {
        if ( args != null ) {
            this.jtf_Studie.setText( args[0] );
            this.jtLF.setText( args[1] );
            this.jtf_OUTPUT.setText( args[2] );
            this.jtfEXT.setText( args[3] );
            this.jlPATTERN.setText( args[4] );
        }
    }

    int selected = 1;
    public int getSelectionCN() {
        // TODO add your handling code here:
        int i = selected;
        if ( jList1.getSelectedValue() == null ) { 
            String si = javax.swing.JOptionPane.showInputDialog(this, "Your choice : " , i );
            i = Integer.parseInt(si);
            i = i-1; // damit es das selbe ist wie der List-Index ...
        }
        else {
            i = this.jList1.getSelectedIndex();
        }
        selected = i;
        return i;
    }

    static Vector<ExtendedNodePairSFE> linked = new Vector<ExtendedNodePairSFE>();
    static Vector<ExtendedNodePairSFE> notLinked = new Vector<ExtendedNodePairSFE>();
    
    /**
     * Hier kommen nur die an, deren LS > ts ist ...
     * @param suggest
     * @param label 
     */
    private void _showSuggestions(Vector<ExtendedNodePairSFE> suggest,  String label) {
        
        int lOverTS = 0;
        TextResultViewer dlg = TextResultViewer.open( label );
        
        Vector<Messreihe> v = new Vector<Messreihe>();
        
        for( ExtendedNodePairSFE p : suggest ) { 
            
            String l = _hasARealLink( p );
            if ( l.equals( "+" ) ) {
                lOverTS++;
                linked.add(p);
            }
            else {
                notLinked.add(p);
            }
            
            dlg.print( l + "\t" + p.toString() +"\n" );
                       
            
            if( !v.contains( p.mrA ) ) v.add( p.mrA );
            if( !v.contains( p.mrB ) ) v.add( p.mrB );
        }
        
        Vector<Messreihe> vv = new Vector<Messreihe>();
        for( Messreihe m : v ) { 
            vv.add( m.copy().setBinningX_sum(24) );
        }
        System.out.println( "*** Done ...");
        if ( vv.size() > 0 )  MultiChart.open(vv, false, label);
        
        //javax.swing.JOptionPane.showMessageDialog(this, lOverTS);
        
    }

    private double initTS() {
        String s = javax.swing.JOptionPane.showInputDialog(this, "Schwelle : " , ""+ts );
        double ts1 = Double.parseDouble(s);
        ts = ts1;
        return ts1;
    }

    private String _hasARealLink(ExtendedNodePairSFE p) {
             
        String l = "-";
        boolean link = false;
        
        String[] wnA = splitWikiName( p.mrA.getIdentifier() );
        String[] wnB = splitWikiName( p.mrB.getIdentifier() );
        
        try {
            Vector<WikiNode> vwn = getLinksVector( new WikiNode( wnA ) );

            for( WikiNode n : vwn ) {
                boolean a = n.wiki.equals( wnB[0] );
                boolean b = n.page.equals( wnB[1] );
                if ( a && b ) {
                    link = true;
                
                    System.out.println( "###### LINK ######");
                   
                }    
            }    
            
        } catch (IOException ex) {
            Logger.getLogger(AdvancedSequenceFileExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if ( link ) {
            l = "+";
        }
        else { 
            l = "-";
        }
        
        return l;
    
    }
    
    public String[] splitWikiName(String identifier) {
        System.out.println( identifier );
        int i = identifier.indexOf("___");
        String[] wn = new String[2];

        wn[0] = identifier.substring(0,i);
        wn[1] = identifier.substring(i+3);
        
        return wn;
    }

    static Hashtable<String,Vector<WikiNode>> hasedLinks = new Hashtable<String,Vector<WikiNode>>();
    
    private Vector<WikiNode> getLinksVector(WikiNode wn) throws IOException {

        String key = wn.getWiki() +"___" + wn.getPage();
        
        System.out.println("\n>[PAGE] : " + wn.page + "\n");
        Vector<WikiNode> linkedNodes = new Vector<WikiNode>();
        
        if ( hasedLinks.containsKey( key ) ) {
            linkedNodes = hasedLinks.get(key);
            System.out.println( "> reuse the linklist : key=" + key );
        }
        else {
            System.out.println( "> LOAD linklist ... key=" + key );
            

            Wiki wiki1 = new Wiki(wn.wiki + ".wikipedia.org");

            
            String url = ExtractCategorieCorpus.getUrl(wn.wiki, wn.page);

            String[] n = wiki1.getLinksOnPage(wn.page);

            for (String s : n) {
                WikiNode wn2 = new WikiNode(wn.wiki, s);

                linkedNodes.add(wn2);
            }

            hasedLinks.put( key, linkedNodes);
        }
        return linkedNodes;
    }

 

}
