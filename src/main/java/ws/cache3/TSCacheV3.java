
package ws.cache3;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "TSCache.v3", targetNamespace = "http://cache.ts.hadoop/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface TSCacheV3 {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "add", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.Add")
    @ResponseWrapper(localName = "addResponse", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.AddResponse")
    @Action(input = "http://cache.ts.hadoop/TSCache.v3/addRequest", output = "http://cache.ts.hadoop/TSCache.v3/addResponse")
    public int add(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "get", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.Get")
    @ResponseWrapper(localName = "getResponse", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.GetResponse")
    @Action(input = "http://cache.ts.hadoop/TSCache.v3/getRequest", output = "http://cache.ts.hadoop/TSCache.v3/getResponse")
    public String get(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "put", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.Put")
    @ResponseWrapper(localName = "putResponse", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.PutResponse")
    @Action(input = "http://cache.ts.hadoop/TSCache.v3/putRequest", output = "http://cache.ts.hadoop/TSCache.v3/putResponse")
    public void put(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "init", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.Init")
    @ResponseWrapper(localName = "initResponse", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.InitResponse")
    @Action(input = "http://cache.ts.hadoop/TSCache.v3/initRequest", output = "http://cache.ts.hadoop/TSCache.v3/initResponse")
    public int init();

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hasKey", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.HasKey")
    @ResponseWrapper(localName = "hasKeyResponse", targetNamespace = "http://cache.ts.hadoop/", className = "ws.cache3.HasKeyResponse")
    @Action(input = "http://cache.ts.hadoop/TSCache.v3/hasKeyRequest", output = "http://cache.ts.hadoop/TSCache.v3/hasKeyResponse")
    public boolean hasKey(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}
