/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cloudera.wikipedia.explorer;

import java.awt.Container;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JPanel;

/**
 *
 * @author kamir
 */
public class ChartFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChartFrame
     */
    public ChartFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chart Frame");
        setBackground(java.awt.Color.white);
        getContentPane().setLayout(new java.awt.GridLayout(2, 3, 5, 5));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static ChartFrame open(JComponent args[][], String title, String lll) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        System.out.println( ">>> Wikipedia relevance studies : {CN=" + title + "}" + args );
        
        ChartFrame cf = new ChartFrame();
        cf.setTitle( "TRI : {CN=" + title + "}" + lll );
        cf.setBoxes( args );
        cf.setVisible(true);
        
        return cf;
 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void setBoxes(JComponent[][] args) {
        
        for( int i = 0; i < 2; i++) {
            for ( int j = 0; j < 3; j++) {
                if ( args[i][j] != null ) this.getContentPane().add( args[i][j] );
                else this.getContentPane().add( new JPanel() );
            }
        }    
    }

    public void _store(String label) {
        
        File file = new File("./data/out/TS.DashBoard_" + label+".png");
        
        System.out.println( ">>> store the TS.Dashboard : "  + file.getAbsolutePath() );
        Container container = this.getContentPane();
        BufferedImage img = new BufferedImage(container.getWidth(), container.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();

        container.printAll(g2d);

        g2d.dispose();
        try {
            
            ImageIO.write(img, "png", file );

        } 
        catch (IOException ex) {
            Logger.getLogger(ChartFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
